"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function navigatorLanguages() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  if ((typeof navigator === "undefined" ? "undefined" : _typeof(navigator)) === undefined) return null;
  var detected = [];

  if (navigator.languages) {
    detected = _toConsumableArray(navigator.languages);
  }

  if (navigator.language) {
    detected.push(navigator.language);
  }

  if (navigator.browserLanguage) {
    detected.push(navigator.browserLanguage);
  }

  if (navigator.userLanguage) {
    detected.push(navigator.userLanguage);
  }

  return detected.length > 0 ? detected : null;
}

var _default = navigatorLanguages;
exports["default"] = _default;